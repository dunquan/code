#include <stdio.h>

#define __u32 unsigned int
#define __u8 unsigned char

#define	CAN_TYPE_SHIFT	26
#define	CAN_FUNC_SHIFT	23
#define	CAN_STEPS_NUM_SHIFT	16
#define	CAN_NODE_NUM_SHIFT	10
#define	CAN_STEP_SHIFT	6
#define	CAN_CHANNEL_SHIFT	0

void can_shift_id(__u8 *type,  __u8 *func, __u8 *steps_num, __u8 *node_num, __u8 *w_c, __u8 *channel, __u32 can_id);
__u32 can_id_calc(__u8 type,  __u8 func, __u8 steps_num, __u8 node_num, __u8 step, __u8 channel);

int main(int argc, char *argv[])
{
	__u8 type;
	__u8 func;
	__u8 steps_num;
	__u8 node_num;
	__u8 w_c;
	__u8 channel;
		
	__u32 tcp_send_id = can_id_calc(0x7, 0x7, 0x7f, 0x3f,0xf,0x4f);
	printf("tcp_send_id %x\n", tcp_send_id);
	can_shift_id(&type, &func, &steps_num, &node_num, NULL, NULL, tcp_send_id);
	printf("type =%x\n func=%x\n steps_num=%x\n node_num=%x\n w_c=%x\n channel=%x\n", 
		type,func,steps_num,node_num,w_c,channel);
	
	
	
	
	return 0;
}


shejo
void can_shift_id(__u8 *type,  __u8 *func, __u8 *steps_num, __u8 *node_num, __u8 *w_c, __u8 *channel, __u32 can_id)
{
	if (type!=NULL) {
		
		*type =(can_id >> 26)&0x7;
	}
	
	if (func!=NULL) {
		
		*func= ((can_id >> 23)&0x7);
		
	}
	
	if (steps_num!=NULL) {
		
		*steps_num = ((can_id >> 16)&0x7F);
	}
	
	if (node_num!=NULL) {
		
		*node_num = ((can_id >> 10)&0x3F);
		
	}
	
	if (w_c!= NULL) {
		
		*w_c = (can_id >> 6)&0xF;
	}
	
	if (channel!=NULL) {
		
		*channel = (can_id&0x3F);
	}
}
//can_id_calc(0x11, 0x22, 0x33, 0x44,0x55,0x66);
__u32 can_id_calc(__u8 type,  __u8 func, __u8 steps_num, __u8 node_num, __u8 step, __u8 channel)
{
	__u32 can_id = (0x4<<29) | ((type&0x7)<<CAN_TYPE_SHIFT)|((func&0x7)<<CAN_FUNC_SHIFT)
			|((steps_num&0x7F)<<CAN_STEPS_NUM_SHIFT)|((node_num&0x3F)<<CAN_NODE_NUM_SHIFT)
			|((step&0xF)<<CAN_STEP_SHIFT)|(channel&0x3F);	//wangdq@0517 add &0xXX
	
	return can_id;
}
